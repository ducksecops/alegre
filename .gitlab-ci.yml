stages:
  - test
  - build_qa
  - deploy_qa

test:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  stage: test
  script:
    - apk add --no-cache curl wget git py-pip
    - pip install docker-compose
    - git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
    - d=configurator/bridge/travis/alegre/; for f in $(find $d -type f); do cp "$f" "${f/$d/}"; done
    - cd data && unzip glove-6B-50d-gensim.txt.zip && mv glove-6B-50d-gensim.txt model.txt && cd -
    - docker-compose pull
    - docker-compose up -d
    # - wget -q --waitretry=1 --retry-connrefused -t 0 -T 10 -O - http://127.0.0.1:9200
    - docker-compose exec -ti alegre bash -c "make test"
  after_script:
    - docker-compose exec -ti alegre bash -c "coverage report"
  only:
    - gitlab/test
build_es_qa:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  stage: build_qa
  variables:
    AWS_ACCESS_KEY_ID: $QA_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $QA_AWS_SECRET_ACCESS_KEY
  script:
    - apk add --no-cache curl jq python py-pip git
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --build-arg STAGE=qa  -f elasticsearch/Dockerfile.production -t "$QA_ECR_ES_BASE_URL:$CI_COMMIT_SHA"  .
    - docker push "$QA_ECR_ES_BASE_URL:$CI_COMMIT_SHA"
  only:
    - gitlab/test

build_kibana_qa:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  stage: build_qa
  variables:
    AWS_ACCESS_KEY_ID: $QA_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $QA_AWS_SECRET_ACCESS_KEY
    ELASTICSEARCH_URL : $ELASTICSEARCH_URL
  script:
    - apk add --no-cache curl jq python py-pip git
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build  -f kibana/Dockerfile.production -t "$QA_ECR_KIBANA_BASE_URL:$CI_COMMIT_SHA"  .
    - docker push "$QA_ECR_KIBANA_BASE_URL:$CI_COMMIT_SHA"
  only:
    - gitlab/test

build_api_qa:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  stage: build_qa
  variables:
    AWS_ACCESS_KEY_ID: $QA_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $QA_AWS_SECRET_ACCESS_KEY
  script:
    - apk add --no-cache curl jq python py-pip git
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
    - d=configurator/check/qa/alegre/; for f in $(find $d -type f); do cp "$f" "${f/$d/}"; done
    - docker build  -f docker/Dockerfile.production -t "$QA_ECR_API_BASE_URL:$CI_COMMIT_SHA"  .
    - docker push "$QA_ECR_API_BASE_URL:$CI_COMMIT_SHA"
  only:
    - gitlab/test




deploy_qa:
  image: python:3
  stage: deploy_qa
  variables:
    AWS_ACCESS_KEY_ID: $QA_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $QA_AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  script:
    - pip install ecs-deploy==1.7.0
    - ecs deploy ecs-qa  qa-alegre-es --image qa-alegre-es-c $QA_ECR_ES_BASE_URL:$CI_COMMIT_SHA --timeout -1
    - echo "new Image was deployed $QA_ECR_ES_BASE_URL:$CI_COMMIT_SHA"
    - ecs deploy ecs-qa  qa-alegre-kibana --image qa-alegre-kibana-c $QA_ECR_KIBANA_BASE_URL:$CI_COMMIT_SHA -e qa-alegre-kibana-c ELASTICSEARCH_URL $ELASTICSEARCH_URL  --timeout -1
    - echo "new Image was deployed $QA_ECR_KIBANA_BASE_URL:$CI_COMMIT_SHA"
    - ecs deploy ecs-qa  qa-alegre --image qa-alegre-c $QA_ECR_API_BASE_URL:$CI_COMMIT_SHA -e qa-alegre-c ELASTICSEARCH_URL $ELASTICSEARCH_URL -e qa-alegre-c PRODUCT $PRODUCT -e qa-alegre-c BOILERPLATE_ENV $BOILERPLATE_ENV --timeout -1
    - echo "new Image was deployed $QA_ECR_API_BASE_URL:$CI_COMMIT_SHA"
  only:
    - gitlab/test